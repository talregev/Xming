XCOMM $XFree86: xc/programs/Xserver/hw/xfree86/os-support/sco/Imakefile,v 3.15 2002/10/17 02:22:49 dawes Exp $




XCOMM $XConsortium: Imakefile /main/4 1996/09/28 17:24:25 rws $

#include <Server.tmpl>

SRCS = sco_init.c sco_video.c sco_io.c sco_iop.c sco_mouse.c VTsw_sco.c \
       std_kbdEv.c posix_tty.c bios_mmap.c vidmem.c \
       libc_wrapper.c stdResource.c stdPci.c sigiostubs.c pm_noop.c \
       kmod_noop.c agp_noop.c sco_kbd.c at_scancode.c sco_KbdMap.c

OBJS = sco_init.o sco_video.o sco_io.o sco_iop.o sco_mouse.o VTsw_sco.o \
       std_kbdEv.o posix_tty.o bios_mmap.o vidmem.o \
       libc_wrapper.o stdResource.o stdPci.o sigiostubs.o pm_noop.o \
       kmod_noop.o agp_noop.o sco_kbd.o at_scancode.o sco_KbdMap.o \
       sco_event.o

INCLUDES = -I$(XF86COMSRC) -I$(XF86OSSRC) -I. -I$(SERVERSRC)/include \
           -I$(SERVERSRC)/mi -I$(XINCLUDESRC) -I$(EXTINCSRC)

RESDEFINES = -DUSESTDRES

DEFINES = $(RESDEFINES)

SubdirLibraryRule($(OBJS))
NormalLibraryObjectRule()

XCOMM Hack for SCO platforms to get around a bug in GNU ld. The server needs
XCOMM to link with -levent for the event driver interface. However, that is
XCOMM a COFF-only library, and GCC/GNU ld only deal with ELF. Theoretically,
XCOMM GNU ld will convert COFF to ELF on the fly, but it gets it wrong. The
XCOMM SCO link editor gets it right. So we create an object here that the
XCOMM server can link against.
sco_event.o:
	@ar x /usr/lib/libevent.a mouse.o
	@/usr/ccs/bin/elf/ld -r -o sco_event.o mouse.o
	@rm -f mouse.o

LinkSourceFile(bios_mmap.c,../shared)
LinkSourceFile(std_kbdEv.c,../shared)
LinkSourceFile(at_scancode.c,../shared)
LinkSourceFile(posix_tty.c,../shared)
LinkSourceFile(libc_wrapper.c,../shared)
LinkSourceFile(stdResource.c,../shared)
LinkSourceFile(stdPci.c,../shared)
LinkSourceFile(sigiostubs.c,../shared)
LinkSourceFile(pm_noop.c,../shared)
LinkSourceFile(kmod_noop.c,../shared)
LinkSourceFile(agp_noop.c,../shared)
LinkSourceFile(vidmem.c,../shared)

DependTarget()

